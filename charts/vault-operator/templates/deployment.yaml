apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ template "vault-operator.fullname" . }}
  namespace: {{ .Release.Namespace }}
  labels:
    {{- include "vault-operator.labels" . | nindent 4 }}
{{- if .Values.annotations }}
  annotations:
{{ toYaml .Values.annotations | indent 4 }}
{{- end }}
spec:
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      app: "{{ template "vault-operator.name" . }}"
      release: "{{ .Release.Name }}"
  template:
    metadata:
      labels:
        {{- include "vault-operator.labels" . | nindent 8 }}
{{- if or .Values.annotations (and .Values.criticalAddon (eq .Release.Namespace "kube-system")) }}
      annotations:
{{- if and .Values.criticalAddon (eq .Release.Namespace "kube-system") }}
        scheduler.alpha.kubernetes.io/critical-pod: ''
{{- end }}
{{- if .Values.annotations }}
{{ toYaml .Values.annotations | indent 8 }}
{{- end }}
{{- end }}
    spec:
      serviceAccountName: {{ template "vault-operator.serviceAccountName" . }}
      securityContext:
        # ensure that s/a token is readable xref: https://issues.k8s.io/70679
        fsGroup: 65535
      containers:
      - name: operator
        image: {{ .Values.operator.registry }}/{{ .Values.operator.repository }}:{{ .Values.operator.tag }}
        imagePullPolicy: {{ .Values.imagePullPolicy  }}
        args:
        - run
        - --v={{ .Values.logLevel }}
        - --secure-port=8443
        - --audit-log-path=-
        - --tls-cert-file=/var/serving-cert/tls.crt
        - --tls-private-key-file=/var/serving-cert/tls.key
        - --enable-mutating-webhook={{ .Values.apiserver.enableMutatingWebhook }}
        - --enable-validating-webhook={{ .Values.apiserver.enableValidatingWebhook }}
        - --bypass-validating-webhook-xray={{ .Values.apiserver.bypassValidatingWebhookXray }}
        - --use-kubeapiserver-fqdn-for-aks={{ .Values.apiserver.useKubeapiserverFqdnForAks }}
        - --enable-analytics={{ .Values.enableAnalytics }}
        - --cluster-name={{ .Values.clusterName }}
        ports:
        - containerPort: 8443
        env:
        - name: MY_POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: MY_POD_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
{{- if .Values.apiserver.healthcheck.enabled }}
        readinessProbe:
          httpGet:
            path: /healthz
            port: 8443
            scheme: HTTPS
          initialDelaySeconds: 5
        livenessProbe:
          httpGet:
            path: /healthz
            port: 8443
            scheme: HTTPS
          initialDelaySeconds: 5
{{- end }}
        resources:
{{ toYaml .Values.resources | indent 10 }}
        volumeMounts:
        - mountPath: /var/serving-cert
          name: serving-cert
      volumes:
      - name: serving-cert
        secret:
          defaultMode: 420
          secretName: {{ template "vault-operator.fullname" . }}-apiserver-cert
{{- if or .Values.tolerations (and .Values.criticalAddon (eq .Release.Namespace "kube-system")) }}
      tolerations:
{{- if .Values.tolerations }}
{{ toYaml .Values.tolerations | indent 8 }}
{{- end -}}
{{- if and .Values.criticalAddon (eq .Release.Namespace "kube-system") }}
      - key: CriticalAddonsOnly
        operator: Exists
{{- end -}}
{{- end -}}
{{- if .Values.affinity }}
      affinity:
{{ toYaml .Values.affinity | indent 8 }}
{{- end -}}
{{- if .Values.nodeSelector }}
      nodeSelector:
{{ toYaml .Values.nodeSelector | indent 8 }}
{{- end -}}
{{- if and .Values.criticalAddon (eq .Release.Namespace "kube-system") }}
      priorityClassName: system-cluster-critical
{{- end -}}
