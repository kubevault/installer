apiVersion: v1
kind: ServiceAccount
metadata:
  name: {{ include "csi-vault.node.fullname" . }}
  namespace: {{ .Release.Namespace }}
  labels:
    {{- include "csi-vault.labels" . | nindent 4 }}
    app.kubernetes.io/component: {{ .Values.components.node }}

---

kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: {{ include "csi-vault.node.fullname" . }}
  labels:
    {{- include "csi-vault.labels" . | nindent 4 }}
    app.kubernetes.io/component: {{ .Values.components.node }}
rules:
- apiGroups: [""]
  resources: ["events"]
  verbs: ["get", "list", "watch", "create", "update", "patch"]
- apiGroups: ["apiextensions.k8s.io"]
  resources: ["customresourcedefinitions"]
  verbs: ["*"]

---

kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: {{ include "csi-vault.node.fullname" . }}
  labels:
    {{- include "csi-vault.labels" . | nindent 4 }}
    app.kubernetes.io/component: {{ .Values.components.node }}
subjects:
- kind: ServiceAccount
  name: {{ include "csi-vault.node.fullname" . }}
  namespace: {{ .Release.Namespace }}
roleRef:
  kind: ClusterRole
  name: {{ include "csi-vault.node.fullname" . }}
  apiGroup: rbac.authorization.k8s.io

---

kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: {{ include "csi-vault.node-registrar.fullname" . }}
  labels:
    {{- include "csi-vault.labels" . | nindent 4 }}
    app.kubernetes.io/component: {{ .Values.components.node }}
rules:
- apiGroups: [""]
  resources: ["secrets"]
  verbs: ["get", "list"]
- apiGroups: [""]
  resources: ["nodes"]
  verbs: ["get", "list", "update"]
- apiGroups: [""]
  resources: ["configmaps"]
  verbs: ["get", "list"]
- apiGroups: [""]
  resources: ["namespaces"]
  verbs: ["get", "list"]
- apiGroups: [""]
  resources: ["persistentvolumes"]
  verbs: ["get", "list", "watch", "update"]
- apiGroups: ["storage.k8s.io"]
  resources: ["volumeattachments"]
  verbs: ["get", "list", "watch", "update", "create"]
- apiGroups: ["csi.storage.k8s.io"]
  resources: ["csidrivers", "csinodeinfos"]
  verbs: ["get", "watch", "list", "update", "patch", "create"]
- apiGroups: [""]
  resources: ["serviceaccounts"]
  verbs: ["get", "list"]
- apiGroups: ["appcatalog.appscode.com"]
  resources: ["*"]
  verbs: ["*"]
- apiGroups: ["authorization.k8s.io"]
  resources: ["subjectaccessreviews"]
  verbs: ["get", "create"]
- apiGroups: ["authentication.k8s.io"]
  resources: ["tokenreviews"]
  verbs: ["get", "create"]
---

# needed for StatefulSet
kind: Service
apiVersion: v1
metadata:
  name: {{ include "csi-vault.node.fullname" . }}
  namespace: {{ .Release.Namespace }}
  labels:
    {{- include "csi-vault.labels" . | nindent 4 }}
    app.kubernetes.io/component: {{ .Values.components.node }}
  {{- if and (eq .Values.monitoring.agent "prometheus.io/builtin") .Values.monitoring.node }}
  annotations:
    prometheus.io/scrape: "true"
    prometheus.io/path: "/metrics"
    prometheus.io/port: "8443"
    prometheus.io/scheme: "https"
  {{- end }}
spec:
  selector:
    {{- include "csi-vault.selectorLabels" . | nindent 4 }}
    app.kubernetes.io/component: {{ .Values.components.node }}
  ports:
  - name: api
    port: 443
    targetPort: 8443

---

kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: {{ include "csi-vault.node-registrar.fullname" . }}
  labels:
    {{- include "csi-vault.labels" . | nindent 4 }}
    app.kubernetes.io/component: {{ .Values.components.node }}
subjects:
- kind: ServiceAccount
  name: {{ include "csi-vault.node.fullname" . }}
  namespace: {{ .Release.Namespace }}
roleRef:
  kind: ClusterRole
  name: {{ include "csi-vault.node-registrar.fullname" . }}
  apiGroup: rbac.authorization.k8s.io

---

{{- $major := default "0" .Capabilities.KubeVersion.Major | trimSuffix "+" | int64 }}
{{- $minor := default "0" .Capabilities.KubeVersion.Minor | trimSuffix "+" | int64 }}
{{- $criticalAddon := and .Values.criticalAddon (or (eq .Release.Namespace "kube-system") (and (ge $major 1) (ge $minor 17))) -}}
kind: DaemonSet
apiVersion: apps/v1
metadata:
  name: {{ include "csi-vault.node.fullname" . }}
  namespace: {{ .Release.Namespace }}
  labels:
    {{- include "csi-vault.labels" . | nindent 4 }}
    app.kubernetes.io/component: {{ .Values.components.node }}
  {{- with .Values.annotations }}
  annotations:
    {{- toYaml . | nindent 4 }}
  {{- end }}
spec:
  selector:
    matchLabels:
      {{- include "csi-vault.selectorLabels" . | nindent 6 }}
      app.kubernetes.io/component: {{ .Values.components.node }}
  template:
    metadata:
      labels:
        {{- include "csi-vault.selectorLabels" . | nindent 8 }}
        app.kubernetes.io/component: {{ .Values.components.node }}
      annotations:
        checksum/apiserver-cert.yaml: {{ include (print $.Template.BasePath "/apiserver-cert.yaml") . | sha256sum }}
      {{- if $criticalAddon }}
        scheduler.alpha.kubernetes.io/critical-pod: ''
      {{- end }}
      {{- with .Values.podAnnotations }}
        {{- toYaml . | nindent 8 }}
      {{- end }}
    spec:
    {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
    {{- end }}
      serviceAccount: {{ include "csi-vault.node.fullname" . }}
      containers:
      - name: node-driver-registrar
        securityContext:
          {{- toYaml .Values.nodeRegistrar.securityContext | nindent 10 }}
        image: {{ .Values.nodeRegistrar.registry}}/{{ .Values.nodeRegistrar.repository }}:{{ .Values.nodeRegistrar.tag }}
        args:
        - --v={{ .Values.logLevel }}
        - --csi-address=/csi/csi.sock
        - --kubelet-registration-path=/var/lib/kubelet/plugins/{{ .Values.driverName }}/csi.sock
        imagePullPolicy: {{ .Values.nodeRegistrar.pullPolicy }}
        resources:
          {{- toYaml .Values.nodeRegistrar.resources | nindent 10 }}
        volumeMounts:
        - name: plugin-dir
          mountPath: /csi
        - name: registration-dir
          mountPath: /registration
      - name: csi-vault-plugin
        securityContext:
          {{- toYaml .Values.plugin.securityContext | nindent 10 }}
        image: {{ .Values.plugin.registry}}/{{ .Values.plugin.repository }}:{{ .Values.plugin.tag }}
        args :
        - run
        - --csi-address=unix:{{ .Values.pluginAddress }}
        - "--node=$(NODE_NAME)"
        - "--v={{ .Values.logLevel }}"
        - --secure-port=8443
        - --tls-cert-file=/var/serving-cert/tls.crt
        - --tls-private-key-file=/var/serving-cert/tls.key
        - --use-kubeapiserver-fqdn-for-aks={{ .Values.apiserver.useKubeapiserverFqdnForAks }}
        - --enable-analytics={{ .Values.enableAnalytics }}
        ports:
        - containerPort: 8443
        env:
        - name: NODE_NAME
          valueFrom:
            fieldRef:
              fieldPath: spec.nodeName
        imagePullPolicy: {{ .Values.plugin.pullPolicy }}
      {{- if .Values.apiserver.healthcheck.enabled }}
        livenessProbe:
          httpGet:
            path: /healthz
            port: 8443
            scheme: HTTPS
          initialDelaySeconds: 10
      {{- end }}
        resources:
          {{- toYaml .Values.plugin.resources | nindent 10 }}
        volumeMounts:
        - name: plugin-dir
          mountPath: /csi
        - name: kubelet-dir
          mountPath: /var/lib/kubelet
          # needed so that any mounts setup inside this container are
          # propagated back to the host machine.
          mountPropagation: "Bidirectional"
        - name: device-dir
          mountPath: /dev
        - mountPath: /var/serving-cert
          name: serving-cert
      volumes:
      - name: registration-dir
        hostPath:
          path: /var/lib/kubelet/plugins_registry/
          type: DirectoryOrCreate
      - name: kubelet-dir
        hostPath:
          path: /var/lib/kubelet
          type: Directory
      - name: plugin-dir
        hostPath:
          path: /var/lib/kubelet/plugins/{{ .Values.driverName }}/
          type: DirectoryOrCreate
      - name: device-dir
        hostPath:
          path: /dev
      - name: serving-cert
        secret:
          defaultMode: 420
          secretName: {{ include "csi-vault.fullname" . }}-apiserver-cert
      securityContext:
        {{- toYaml .Values.podSecurityContext | nindent 8 }}
    {{- if or .Values.tolerations $criticalAddon }}
      tolerations:
      {{- with .Values.tolerations }}
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- if $criticalAddon }}
        - key: CriticalAddonsOnly
          operator: Exists
      {{- end -}}
    {{- end -}}
    {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
    {{- end }}
    {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
    {{- end }}
    {{- if $criticalAddon }}
      priorityClassName: system-cluster-critical
    {{- end -}}
