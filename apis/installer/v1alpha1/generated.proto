/*
Copyright The KubeVault Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/


// This file was autogenerated by go-to-protobuf. Do not edit it manually!

syntax = 'proto2';

package kubevault.dev.installer.apis.installer.v1alpha1;

import "k8s.io/api/core/v1/generated.proto";
import "k8s.io/apimachinery/pkg/apis/meta/v1/generated.proto";
import "k8s.io/apimachinery/pkg/runtime/generated.proto";
import "k8s.io/apimachinery/pkg/runtime/schema/generated.proto";

// Package-wide variables from generator "generated".
option go_package = "v1alpha1";

message HealthcheckSpec {
  optional bool enabled = 1;
}

message ImageRef {
  optional string registry = 1;

  optional string repository = 2;

  optional string tag = 3;
}

// +kubebuilder:object:root=true
// +kubebuilder:resource:path=kubevaultoperators,singular=kubevaultoperator,categories={kubevault,appscode}
message KubeVaultOperator {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;

  optional KubeVaultOperatorSpec spec = 2;
}

// KubeVaultOperatorList is a list of KubeVaultOperators
message KubeVaultOperatorList {
  optional k8s.io.apimachinery.pkg.apis.meta.v1.ListMeta metadata = 1;

  // Items is a list of KubeVaultOperator CRD objects
  repeated KubeVaultOperator items = 2;
}

// KubeVaultOperatorSpec is the spec for redis version
message KubeVaultOperatorSpec {
  optional int32 replicaCount = 1;

  optional ImageRef operator = 2;

  optional ImageRef cleaner = 3;

  optional string imagePullPolicy = 4;

  repeated string imagePullSecrets = 5;

  optional bool criticalAddon = 6;

  optional int32 logLevel = 7;

  map<string, string> annotations = 8;

  map<string, string> nodeSelector = 9;

  // If specified, the pod's tolerations.
  // +optional
  repeated k8s.io.api.core.v1.Toleration tolerations = 10;

  // If specified, the pod's scheduling constraints
  // +optional
  optional k8s.io.api.core.v1.Affinity affinity = 11;

  // Compute Resources required by the sidecar container.
  optional k8s.io.api.core.v1.ResourceRequirements resources = 12;

  optional ServiceAccountSpec serviceAccount = 13;

  optional WebHookSpec apiserver = 14;

  optional bool enableAnalytics = 15;

  optional Monitoring monitoring = 16;

  optional string clusterName = 17;
}

message Monitoring {
  optional string agent = 1;

  optional bool operator = 2;

  optional PrometheusSpec prometheus = 3;

  optional ServiceMonitorLabels serviceMonitor = 4;
}

message PrometheusSpec {
  optional string namespace = 1;
}

message ServiceAccountSpec {
  optional bool create = 1;

  optional string name = 2;
}

message ServiceMonitorLabels {
  map<string, string> labels = 1;
}

message ServingCerts {
  optional bool generate = 1;

  optional string caCrt = 2;

  optional string serverCrt = 3;

  optional string serverKey = 4;
}

message WebHookSpec {
  optional int32 groupPriorityMinimum = 1;

  optional int32 versionPriority = 2;

  optional bool enableMutatingWebhook = 3;

  optional bool enableValidatingWebhook = 4;

  optional string ca = 5;

  optional bool bypassValidatingWebhookXray = 6;

  optional bool useKubeapiserverFqdnForAks = 7;

  optional HealthcheckSpec healthcheck = 8;

  optional ServingCerts servingCerts = 9;
}

