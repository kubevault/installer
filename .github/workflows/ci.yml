name: CI

on:
  pull_request:
    branches:
      - "*"
  push:
    branches:
      - master
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.head_ref || github.ref }}
  cancel-in-progress: true

jobs:
  build:
    name: Build
    runs-on: ubuntu-20.04
    steps:
      - name: Set up Go 1.20
        uses: actions/setup-go@v1
        with:
          go-version: '1.20'
        id: go

      - name: Check out code into the Go module directory
        uses: actions/checkout@v1

      - name: Prepare Host
        run: |
          sudo apt-get -qq update || true
          sudo apt-get install -y bzr
          # install yq
          curl -fsSL -o yqq https://github.com/mikefarah/yq/releases/download/3.3.0/yq_linux_amd64
          chmod +x yqq
          sudo mv yqq /usr/local/bin/yqq
          pip3 install yq
          # install kubectl
          curl -LO https://storage.googleapis.com/kubernetes-release/release/v1.21.1/bin/linux/amd64/kubectl
          chmod +x ./kubectl
          sudo mv ./kubectl /usr/local/bin/kubectl

      - name: Run checks
        run: |
          make ci

  kubernetes:
    name: Kubernetes
    runs-on: ubuntu-20.04
    needs: build
    strategy:
      matrix:
        k8s: [v1.20.15, v1.21.14, v1.22.15, v1.23.13, v1.24.7, v1.25.3, v1.26.0]
    steps:
      - uses: actions/checkout@v1

      - name: Install yq
        run: |
          curl -fsSL -o yqq https://github.com/mikefarah/yq/releases/download/3.3.0/yq_linux_amd64
          chmod +x yqq
          sudo mv yqq /usr/local/bin/yqq

      - name: Create Kubernetes ${{ matrix.k8s }} cluster
        id: kind
        uses: engineerd/setup-kind@v0.5.0
        with:
          version: v0.17.0
          image: kindest/node:${{ matrix.k8s }}

      - name: Prepare cluster for testing
        id: local-path
        env:
          USERNAME: 1gtm
          REGISTRY_SECRET: regcred
        run: |
          echo "waiting for nodes to be ready ..."
          kubectl wait --for=condition=Ready nodes --all --timeout=5m
          kubectl get nodes
          echo
          echo "install helm 3"
          curl https://raw.githubusercontent.com/helm/helm/master/scripts/get-helm-3 | bash

      - name: Issue License
        env:
          BYTEBUILDERS_LICENSE_TOKEN: ${{ secrets.BYTEBUILDERS_LICENSE_TOKEN }}
        run: |
          export KUBECONFIG="${HOME}/.kube/config"
          CLUSTER_UID=$(kubectl get ns kube-system -o=jsonpath='{.metadata.uid}')
          LICENSE_KEY=$(curl -X POST -d "name=1gtm&email=1gtm@appscode.com&product=kubevault-enterprise&cluster=${CLUSTER_UID}&tos=true&token=${BYTEBUILDERS_LICENSE_TOKEN}" https://license-issuer.appscode.com/issue-license)
          echo "${LICENSE_KEY}" > /tmp/license.txt
          # ref: https://github.com/mikefarah/yq/issues/230#issuecomment-487458629
          yqq w -i ./charts/kubevault-operator/ci/ci-values.yaml license --tag '!!str' -- "${LICENSE_KEY}"
          yqq w -i ./charts/kubevault-webhook-server/ci/ci-values.yaml license --tag '!!str' -- "${LICENSE_KEY}"

      - name: Check metrics configuration
        run: |
          # install metrics-configuration-checker
          curl -fsSL -o metrics-configuration-checker https://github.com/kmodules/metrics-configuration-checker/releases/download/v0.0.2/metrics-configuration-checker-linux-amd64
          chmod +x metrics-configuration-checker
          sudo mv metrics-configuration-checker /usr/local/bin/metrics-configuration-checker
          # check kubevault-metrics chart
          export KUBECONFIG="${HOME}/.kube/config"
          kubectl create -f crds/kubevault-crds.yaml
          metrics-configuration-checker --content=./charts/kubevault-metrics/templates/

      - name: Test charts
        run: |
          export KUBECONFIG="${HOME}/.kube/config"
          ./hack/scripts/update-chart-dependencies.sh
          ./hack/scripts/ct.sh

      - name: Test Monitoring
        run: |
          export LICENSE_FILE=/tmp/license.txt
          helm repo add prometheus-community https://prometheus-community.github.io/helm-charts
          helm repo update
          helm upgrade -i kube-prometheus-stack prometheus-community/kube-prometheus-stack --wait \
            --namespace monitoring --create-namespace \
            --set grafana.defaultDashboardsEnabled=false
          helm upgrade -i kubevault charts/kubevault --wait \
            --namespace kubevault --create-namespace \
            --set-file global.license=$LICENSE_FILE \
            --set global.monitoring.agent=prometheus.io/operator \
            --set global.monitoring.serviceMonitor.labels.release=kube-prometheus-stack
          helm delete kubevault --namespace kubevault
          helm upgrade -i kubevault charts/kubevault --wait \
            --namespace kubevault --create-namespace \
            --set-file global.license=$LICENSE_FILE \
            --set global.monitoring.agent=prometheus.io/builtin
